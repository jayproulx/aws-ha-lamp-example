AWSTemplateFormatVersion: '2010-09-09'
Description: Create a high availability PHP website on AWS
Parameters:
  AppName:
    Description: Name of the application.
    MaxLength: 100
    MinLength: 1
    Type: String
  Environment:
    Description: Environment suffix for services
    Default: 'Prod'
    MinLength: 3
    MaxLength: 4
    Type: String
    AllowedValues:
      - 'Dev'
      - 'Prod'
#  Todo: Bug here, Beanstalk OptionSettings won't accept an Fn::ImportValue: !Sub "key"
  CertificateArn:
    Type: String
    Description: ACM Certificate to use for SSL for various resources in this stack
  RDSUsername:
    Type: String
    Description: RDS Username
  RDSPassword:
    Type: String
    Description: RDS Password
    NoEcho: true
  RDSHostname:
    Type: String
    Description: RDS Hostname
  RDSDatabase:
    Type: String
    Description: RDS Database
Mappings:
  AWSELBAccountId:
    us-east-1:
      Account: 127311923021
  SubDomain:
    Prod:
      Suffix: ''
    Dev:
      Suffix: 'dev'
Resources:
  LogsBucket:
    Type: AWS::S3::Bucket
  LogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LogsBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "s3:PutObject"
            Resource:
              Fn::Sub: ["${arn}/*", {arn: !GetAtt [LogsBucket, Arn]}]
            Principal:
              AWS: !FindInMap [AWSELBAccountId, !Ref "AWS::Region", Account]
  StaticResources:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
# Example bucket encryption:
#      BucketEncryption:
#        ServerSideEncryptionConfiguration:
#          - ServerSideEncryptionByDefault:
#              SSEAlgorithm: aws:kms
  StaticOriginAccessIdentity:
      Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: Identity for requests to StaticResources
  BeanstalkApplication:
    Type: "AWS::ElasticBeanstalk::Application"
    Properties:
      ApplicationName: !Sub "${AppName}${Environment}App"
      Description: "AWS Elastic Beanstalk PHP Sample Application"
  BeanstalkConfigurationTemplate:
    Type: "AWS::ElasticBeanstalk::ConfigurationTemplate"
    DependsOn: [BeanstalkApplication]
    Properties:
      Description: !Sub "${AppName} ${Environment} Configuration Template"
      ApplicationName: !Ref BeanstalkApplication
      SolutionStackName: "64bit Amazon Linux 2017.09 v2.6.5 running PHP 7.1"
      OptionSettings:
        - Namespace: "aws:elasticbeanstalk:environment"
          OptionName: "LoadBalancerType"
          Value: application
        - Namespace: "aws:elbv2:loadbalancer"
          OptionName: "AccessLogsS3Bucket"
          Value: !Ref LogsBucket
        - Namespace: "aws:elbv2:loadbalancer"
          OptionName: "AccessLogsS3Enabled"
          Value: true
        - Namespace: "aws:elbv2:loadbalancer"
          OptionName: "AccessLogsS3Prefix"
          Value: BeanstalkELB
        - Namespace: "aws:autoscaling:asg"
          OptionName: "MinSize"
          Value: 2
#        - Namespace: "aws:elb:loadbalancer"
#          OptionName: "CrossZone"
#          Value: true
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "RDS_USERNAME"
          Value: !Ref RDSUsername
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "RDS_PASSWORD"
          Value: !Ref RDSPassword
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "RDS_HOSTNAME"
          Value: !Ref RDSHostname
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "RDS_DB_NAME"
          Value: !Ref RDSDatabase
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "ASSET_BUCKET"
          Value: !Ref StaticResources
        - Namespace: "aws:elasticbeanstalk:application:environment"
          OptionName: "ASSET_PREFIX"
          Value: "cdn"
        - Namespace: "aws:autoscaling:launchconfiguration"
          OptionName: "IamInstanceProfile"
          Value: !Ref BeanstalkInstanceProfile

#        - Namespace: "aws:elb:listener:443"
#          OptionName: "ListenerProtocol"
#          Value: "HTTPS"
#        - Namespace: "aws:elb:listener:443"
#          OptionName: "SSLCertificateId"
#          Value: !Ref CertificateArn
##          Value:
##            Fn::ImportValue: !Sub "${Application}${Environment}ACMCertificate"
#        - Namespace: "aws:elb:listener:443"
#          OptionName: "InstancePort"
#          Value: "80"
  BeanstalkPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - "aws-elasticbeanstalk-ec2-role"
      PolicyName: !Sub "${AppName}${Environment}-BeanstalkPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "s3:Get*"
              - "s3:List*"
              - "s3:PutObject"
            Resource: !GetAtt [StaticResources, Arn]
  BeanstalkInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - "aws-elasticbeanstalk-ec2-role"
  BeanstalkEnvironment:
    Type: "AWS::ElasticBeanstalk::Environment"
    DependsOn: [BeanstalkApplication, BeanstalkConfigurationTemplate]
    Properties:
      EnvironmentName: !Sub "${AppName}${Environment}Environment"
      ApplicationName: !Ref BeanstalkApplication
      TemplateName: !Ref BeanstalkConfigurationTemplate
      Description: "AWS Elastic Beanstalk Environment"
  BeanstalkCDN:
    Type: AWS::CloudFront::Distribution
    DependsOn: [BeanstalkEnvironment, LogsBucket]
    Properties:
      DistributionConfig:
        Comment: CDN for Elastic Beanstalk ELB
        Enabled: 'true'
        Logging:
          Bucket: !GetAtt [LogsBucket, DomainName]
          IncludeCookies: false
          Prefix: WebsiteCDN
        Aliases:
          - Fn::ImportValue: !Sub "${AppName}${Environment}ACMWebsiteDomain"
        ViewerCertificate:
          AcmCertificateArn:
            Fn::ImportValue: !Sub "${AppName}${Environment}ACMCertificate"
          SslSupportMethod: "sni-only"
        DefaultCacheBehavior:
          AllowedMethods: [HEAD, DELETE, POST, GET, OPTIONS, PUT, PATCH]
          ViewerProtocolPolicy: redirect-to-https
          TargetOriginId: beanstalk-elb
          ForwardedValues:
            QueryString: 'true'
            Headers:
              - "*"
            Cookies:
              Forward: all
        CacheBehaviors:
          - PathPattern: "*.css"
            ViewerProtocolPolicy: redirect-to-https
            TargetOriginId: beanstalk-elb
            ForwardedValues:
              QueryString: 'false'
          - PathPattern: "*.js"
            ViewerProtocolPolicy: redirect-to-https
            TargetOriginId: beanstalk-elb
            ForwardedValues:
              QueryString: 'false'
          - PathPattern: "cdn/*"
            ViewerProtocolPolicy: redirect-to-https
            TargetOriginId: static-resources
            ForwardedValues:
              QueryString: 'false'
        Origins:
          - Id: beanstalk-elb
            CustomOriginConfig:
              HTTPPort: '80'
              HTTPSPort: '443'
              OriginProtocolPolicy: http-only
            DomainName: !GetAtt [BeanstalkEnvironment, EndpointURL]
          - Id: static-resources
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${StaticOriginAccessIdentity}"
            DomainName: !GetAtt [StaticResources, DomainName]
Outputs:
  BeanstalkEndpointURL:
    Value: !GetAtt [BeanstalkEnvironment, EndpointURL]
    Export:
      Name: !Sub "${AWS::StackName}EndpointURL"
  BeanstalkDistribution:
    Value: !GetAtt [BeanstalkCDN, DomainName]
    Export:
      Name: !Sub "${AWS::StackName}BeanstalkURL"
