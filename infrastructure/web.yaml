AWSTemplateFormatVersion: '2010-09-09'
Description: Create a high availability PHP website on AWS
Parameters:
  AppName:
    Description: Name of the application.
    MaxLength: 100
    MinLength: 1
    Type: String
  Environment:
    Description: Environment suffix for services
    Default: 'Prod'
    MinLength: 3
    MaxLength: 4
    Type: String
    AllowedValues:
      - 'Dev'
      - 'Prod'
#  Todo: Bug here, Beanstalk OptionSettings won't accept an Fn::ImportValue: !Sub "key"
  CertificateArn:
    Type: String
    Description: ACM Certificate to use for SSL for various resources in this stack
Mappings:
  Region2S3WebsiteSuffix:
    us-east-1:
      Suffix: .s3-website-us-east-1.amazonaws.com
    us-west-1:
      Suffix: .s3-website-us-west-1.amazonaws.com
    us-west-2:
      Suffix: .s3-website-us-west-2.amazonaws.com
    eu-west-1:
      Suffix: .s3-website-eu-west-1.amazonaws.com
    eu-west-2:
      Suffix: .s3-website-eu-west-2.amazonaws.com
    ap-northeast-1:
      Suffix: .s3-website-ap-northeast-1.amazonaws.com
    ap-northeast-2:
      Suffix: .s3-website-ap-northeast-2.amazonaws.com
    ap-southeast-1:
      Suffix: .s3-website-ap-southeast-1.amazonaws.com
    ap-southeast-2:
      Suffix: .s3-website-ap-southeast-2.amazonaws.com
    ap-south-1:
      Suffix: .s3-website-ap-south-1.amazonaws.com
    us-east-2:
      Suffix: .s3-website-us-east-2.amazonaws.com
    ca-central-1:
      Suffix: .s3-website-ca-central-1.amazonaws.com
    sa-east-1:
      Suffix: .s3-website-sa-east-1.amazonaws.com
    cn-north-1:
      Suffix: .s3-website.cn-north-1.amazonaws.com.cn
    eu-central-1:
      Suffix: .s3-website-eu-central-1.amazonaws.com
  SubDomain:
    Prod:
      Suffix: ''
    Dev:
      Suffix: 'dev'
Resources:
  LogsBucket:
    Type: AWS::S3::Bucket
  StaticResources:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
  StaticOriginAccessIdentity:
      Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: Identity for StaticResourcesCDN
  StaticResourcesCDN:
    Type: AWS::CloudFront::Distribution
    DependsOn: [StaticResources, LogsBucket, StaticOriginAccessIdentity]
    Properties:
      DistributionConfig:
        Comment: CDN for Static website assets
        Logging:
          Bucket: !GetAtt [LogsBucket, DomainName]
          IncludeCookies: false
          Prefix: StaticResourcesCDN
        Enabled: 'true'
        Aliases:
          - Fn::ImportValue: !Sub "${AppName}${Environment}ACMStaticDomain"
        ViewerCertificate:
          AcmCertificateArn:
            Fn::ImportValue: !Sub "${AppName}${Environment}ACMCertificate"
          SslSupportMethod: "sni-only"
        DefaultCacheBehavior:
          ViewerProtocolPolicy: redirect-to-https
          TargetOriginId: static-resources
          ForwardedValues:
            QueryString: 'false'
        DefaultRootObject: index.html
        Origins:
          - Id: static-resources
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${StaticOriginAccessIdentity}"
            DomainName: !GetAtt [StaticResources, DomainName]
  BeanstalkApplication:
    Type: "AWS::ElasticBeanstalk::Application"
    Properties:
      ApplicationName: !Sub "${AppName}${Environment}App"
      Description: "AWS Elastic Beanstalk PHP Sample Application"
  BeanstalkConfigurationTemplate:
    Type: "AWS::ElasticBeanstalk::ConfigurationTemplate"
    DependsOn: [BeanstalkApplication]
    Properties:
      Description: !Sub "${AppName} ${Environment} Configuration Template"
      ApplicationName: !Ref BeanstalkApplication
      SolutionStackName: "64bit Amazon Linux 2017.09 v2.6.5 running PHP 7.1"
#      OptionSettings:
#        - Namespace: "aws:elb:listener:443"
#          OptionName: "ListenerProtocol"
#          Value: "HTTPS"
#        - Namespace: "aws:elb:listener:443"
#          OptionName: "SSLCertificateId"
#          Value: !Ref CertificateArn
##          Value:
##            Fn::ImportValue: !Sub "${Application}${Environment}ACMCertificate"
#        - Namespace: "aws:elb:listener:443"
#          OptionName: "InstancePort"
#          Value: "80"
  BeanstalkEnvironment:
    Type: "AWS::ElasticBeanstalk::Environment"
    DependsOn: [BeanstalkApplication, BeanstalkConfigurationTemplate]
    Properties:
      EnvironmentName: !Sub "${AppName}${Environment}Environment"
      ApplicationName: !Ref BeanstalkApplication
      TemplateName: !Ref BeanstalkConfigurationTemplate
      Description: "AWS Elastic Beanstalk Environment"
  BeanstalkCDN:
    Type: AWS::CloudFront::Distribution
    DependsOn: [BeanstalkEnvironment, LogsBucket]
    Properties:
      DistributionConfig:
        Comment: CDN for Elastic Beanstalk ELB
        DefaultRootObject: index.php
        Logging:
          Bucket: !GetAtt [LogsBucket, DomainName]
          IncludeCookies: false
          Prefix: WebsiteCDN
        Enabled: 'true'
        Aliases:
          - Fn::ImportValue: !Sub "${AppName}${Environment}ACMWebsiteDomain"
        ViewerCertificate:
          AcmCertificateArn:
            Fn::ImportValue: !Sub "${AppName}${Environment}ACMCertificate"
          SslSupportMethod: "sni-only"
        DefaultCacheBehavior:
          ViewerProtocolPolicy: redirect-to-https
          TargetOriginId: beanstalk-elb
          ForwardedValues:
            QueryString: 'false'
        Origins:
          - Id: beanstalk-elb
            CustomOriginConfig:
              HTTPPort: '80'
              HTTPSPort: '443'
              OriginProtocolPolicy: http-only
            DomainName: !GetAtt [BeanstalkEnvironment, EndpointURL]
Outputs:
  BeanstalkEndpointURL:
    Value: !GetAtt [BeanstalkEnvironment, EndpointURL]
    Export:
      Name: !Sub "${AWS::StackName}EndpointURL"
  StaticDistribution:
    Value: !GetAtt [StaticResourcesCDN, DomainName]
    Export:
      Name: !Sub "${AWS::StackName}StaticURL"
  BeanstalkDistribution:
    Value: !GetAtt [BeanstalkCDN, DomainName]
    Export:
      Name: !Sub "${AWS::StackName}BeanstalkURL"
